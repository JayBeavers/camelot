A "node":http://nodejs.org wrapper for webcam controller providing configurable async frame grabbing. Grab frames, receive frame events!

h2. How it works

Once grabbing starts ( _grab()_ ), frames are periodically grabbed off the web cam ( _/dev/videoX_ ) depending on the provided frequency option. Within Camelot, once a frame is grabbed, an event is emitted ( _on('frame', ...)_ ) containing the binary frame. Also, instead of relying on event emission, a callback can also be passed to the grab() function, which will apply the callback upon frame grabbing. As per convensional wisdom, an error event will also be emitted upon Error ( _on('error', ...)_ ).

h2. Examples

<pre>
var Camelot = require('./camelot.js');

var camelot = new Camelot( {
  'rotate' : '180',
  'flip' : 'v'
});

camelot.on('frame', function (image) {
  console.log('frame received!');
});

camelot.on('error', function (err) {
  console.log(err);
});

camelot.grab( {
  'title' : 'Camelot',
  'font' : 'Arial:24',
  'frequency' : 1    
});
</pre>

h2. Features

* Infinit frame grabbing based on frequency (in sec).
* Banner
* Png/Jpeg
* Rotation
* Resolution

h2. Installation

h3. Requirements

This module assumes you have a working binary of fswebcam along with font management library and associated font path definition (e.g. GDFONTPATH). This module has been solely tested on Ubuntu with a "Rocketfish 8MP USB HD RF-HDWEB":http://www.rocketfishproducts.com/products/computers/RF-HDWEB.html webcam but should work with any webcam supported by the v4l library.

h3. Git Clone

@$ git clone git://github.com/pdeschen/camelot.git@

h3. Install from npm

@$ sudo npm install camelot [-g]@

h2. Todos

* Instead of relying on fswebcam binary, implement node native module using v4l.
